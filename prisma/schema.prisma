generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id          String            @id @default(uuid())
  name        String
  description String?
  slug        String            @unique
  images      Attachment[]
  options     Option[]
  skus        ProductSku[]
  categories  ProductCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Option {
  id           String        @id @default(uuid())
  productId    String
  optionName   String
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionValues OptionValue[]
  SkuValue     SkuValue[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([productId, id])
  @@index([productId])
}

model OptionValue {
  id        String     @id @default(uuid())
  productId String
  optionId  String
  valueName String
  option    Option     @relation(fields: [productId, optionId], references: [productId, id], onDelete: Cascade)
  SkuValue  SkuValue[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([productId, optionId])
}

model ProductSku {
  id            String       @unique @default(uuid())
  productId     String
  sku           String       @unique
  details       String?
  price         Int?
  stockQuantity Int?
  skuValues     SkuValue[]
  images        Attachment[]
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([productId])
}

model Attachment {
  id           String      @id @default(uuid())
  fileKey      String
  fileUrl      String
  productSkuId String?
  productId    String?
  productSku   ProductSku? @relation(fields: [productSkuId], references: [id], onDelete: SetNull)
  Product      Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([productSkuId])
  @@index([productId])
}

model SkuValue {
  id            String      @id @default(uuid())
  skuId         String
  optionId      String
  optionValueId String
  productSku    ProductSku  @relation(fields: [skuId], references: [id], onDelete: Cascade)
  option        Option      @relation(fields: [optionId], references: [id])
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  @@index([optionId])
  @@index([skuId])
  @@index([optionValueId])
}
